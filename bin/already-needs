#!perl
use v5.36.0;

use lib 'lib';

use DBI;
use Getopt::Long::Descriptive;
use Metanalysis;
use Term::ANSIColor;
use version;

my ($opt, $usage) = describe_options(
  '%c %o DBFILE DIST...',
  [],
  [ 'cpan=s',   "path to a CPAN mirror" ],
  [ 'cpanid=s', "if no dists given, all dists for this author" ],
  [ 'only-bumpable|B', 'only show things we can bump up'  ],
  [ 'minimum-interesting|n=s', q{skip anything that can't reach this version (use v5.x format)} ],
  [ 'debug',    "make more noise" ],
);

my $min = $opt->minimum_interesting
        ? version->parse($opt->minimum_interesting)
        : undef;

if (@ARGV > 1 && $opt->cpanid) {
  die "--cpanid doesn't make sense with a list of dists.\n";
}

$usage->die unless @ARGV;

my $db_file = shift @ARGV;
my $ma = Metanalysis->new({ db_file => $db_file });
my $dbh = $ma->dbh;

my @queue = @ARGV;

unless (@queue) {
  die "can't find your minicpan!\n"
    unless $ENV{HOME} && -d "$ENV{HOME}/minicpan";

  require Parse::CPAN::Packages::Fast;
  my $index = Parse::CPAN::Packages::Fast->new(
    "$ENV{HOME}/minicpan/modules/02packages.details.txt.gz"
  );

  my $cpanid = $opt->cpanid;
  unless ($cpanid) {
    die "no --cpanid provided, and \$USER environment variable not set\n"
      unless $ENV{USER};

    warn "no --cpanid provided, so using $ENV{USER}\n";
    $cpanid = $ENV{USER};
  }

  $cpanid = uc $cpanid;

  my @dists = grep {; $_->cpanid eq $cpanid } $index->latest_distributions;
  @queue = sort map {; $_->dist } @dists;
}

my sub shorten ($dist_name) {
  $dist_name =~ s/\ADist-Zilla-Plugin-/D-Z-P-/r;
}

my sub maybe_color ($version) {
  return sprintf '%8s', '~' unless $version;

  my $str = sprintf '%8s', $version->normal;

  return colored(['bright_green'],   $str) if $version ge v5.22.0;
  return colored(['bright_yellow'],  $str) if $version ge v5.20.0;
  return colored(['ansi141'],        $str) if $version ge v5.18.0;
  return colored(['bright_magenta'], $str) if $version ge v5.14.0;
  return colored(['ansi208'],        $str) if $version ge v5.10.0;

  return $str;
}

for my $dist (@queue) {
  my @already = do {
    local $ENV{ANSI_COLORS_DISABLED} = 1;
    `$^X bin/dep-tree $db_file $dist --once`;
  };

  chomp @already;
  s/\A\s+//, s/\s+\z// for @already;

  # This is a funny one. -- rjbs, 2023-01-03
  @already = grep {; $_ ne 'podlators' } @already;

  my %other = map {; $_ => $ma->perl_for_dist($_) } @already;
  my ($max) = sort {; $b cmp $a } grep {; defined } values %other;
  my @at_max  = defined $max
              ? (sort grep {; $ma->perl_for_dist($_) == $max } keys %other)
              : ();

  my $perl_for_dist = $ma->perl_for_dist($dist);

  if (
    ($perl_for_dist && $max && $perl_for_dist >= $max)
    or
    (!$perl_for_dist && !$max)
  ) {
    next if $opt->only_bumpable;

    printf "%-35s (%s) -- not forced\n",
      shorten($dist),
      maybe_color($perl_for_dist);

    next;
  }

  if ($min) {
    next unless $max && $max >= $min;
  }

  my $via;
  if (@at_max > 3) {
    my $n = @at_max - 3;
    $via = "@at_max[0..2] plus $n more";
  } elsif (@at_max) {
    $via = "@at_max";
  } else {
    $via = "~";
  }

  printf "%-35s (%8s) -> (%8s) via %s\n",
    shorten($dist),
    maybe_color($perl_for_dist),
    maybe_color($max),
    $via;
}
