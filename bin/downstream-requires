#!perl
use v5.36.0;

use lib 'lib';

use DBI;
use Getopt::Long::Descriptive;
use Metanalysis;
use Term::ANSIColor;
use version;

my ($opt, $usage) = describe_options(
  '%c %o DBFILE DIST...',
  [],
  [ 'square-circle', 'use upstreams for each downstream (woah)' ],
  [ 'odd-is-okay',   'do not bump v5.11 to v5.12, for example' ],
  [],
  [ 'debug',    "make more noise" ],
);

$usage->die unless @ARGV == 2;

my $db_file = shift @ARGV;
my $ma  = Metanalysis->new({ db_file => $db_file });
my $dbh = $ma->dbh;

my $dist = $ARGV[0];

my @downstream = do {
  local $ENV{ANSI_COLORS_DISABLED} = 1;
  `$^X bin/what-requires $db_file $dist --once`;
};

chomp @downstream;
s/\A\s+//, s/\s+\z// for @downstream;

if ($opt->debug) {
  say for @downstream;
}

my %declares;
my $total;

for my $dep (@downstream) {
  my $req;

  my $dep_perl;
  if ($opt->square_circle) {
    my @upstreams = $ma->recursive_requirements_for($dep);
    $dep_perl = $ma->maximum_perl_required_among(\@upstreams);
  } else {
    $dep_perl = $ma->perl_for_dist($dep);
  }


  if ($dep_perl && $dep_perl->normal =~ /\Av5\.(\d+)\./) {
    my $y = $1;
    $y++ if $y % 2 && ! $opt->odd_is_okay;
    $req = sprintf '5.%03i', $y;
  }

  $req //= '~';

  if ($opt->debug) {
    printf "%6s - %s\n", $req, $dep;
  }

  $declares{$req}++;
  $total++;
}

for my $dec (sort keys %declares) {
  printf "%6s - %5i  (%5.02f%%)\n",
    $dec,
    $declares{$dec},
    100 * $declares{$dec} / $total;
}

say q{};
say qq{TOTAL: $total};
