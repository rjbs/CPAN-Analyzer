#!/usr/bin/env perl
use v5.36.0;

use lib 'lib';

use DBI;
use Getopt::Long::Descriptive;
use Metanalysis;
use Module::CoreList;
use Text::Table;

my ($opt, $usage) = describe_options(
  '%c %o DBFILE',
  [ 'cpanid=s',     'only print lines for this cpan author' ],
  [ 'format|o=s@',  'fields to print; options: score, prereqs, dist, cpanid, minperl',
                    { default => [ qw(prereqs dist) ] } ],
  [ 'min-score|n=i',  'skip dists with a score lower than this' ],
  [ 'modules',      'print module names, not dist names' ],
);

my ($db_file) = @ARGV;

$usage->die unless $db_file;

my $dbh = DBI->connect("dbi:SQLite:dbname=$db_file", undef, undef);

my $ma = Metanalysis->new({ db_file => $db_file });

my %required_as;
for my $prereq (
  $dbh->selectall_arrayref(
    'SELECT DISTINCT module, module_dist FROM dist_prereqs',
    { Slice => {} },
  )->@*
) {
  next if $prereq->{module} eq 'perl';
  next if ! defined $prereq->{module_dist};

  $required_as{ $prereq->{module_dist} }{ $prereq->{module} } = 1;
}

my $sth = $dbh->prepare(
  "SELECT DISTINCT dist
  FROM dist_prereqs
  WHERE module_dist = ?
    AND type = 'requires'
    AND phase <> 'develop'
    AND phase <> 'x_Dist_Zilla' /* !? */
  ORDER BY LOWER(module_dist)",
);

my $dist_rows = $dbh->selectall_arrayref(
  'SELECT * FROM dists',
  { Slice => {} },
);

my %row_for = map {; $_->{dist} => $_ } @$dist_rows;

my %count;
for my $dist (keys %row_for) {
  $count{$dist} = downstream_count($dist);
}

sub display_as ($distname) {
  return $distname unless $opt->modules;

  my $mname = $distname =~ s/-/::/gr;
  return $mname if $required_as{$distname}{$mname};

  my ($name) = sort keys $required_as{$distname}->%*;
  return $name;
}

my $table = Text::Table->new($opt->format->@*);

my %col = (
  score   => sub ($dist, $prereqs) { length($prereqs) - 1 },
  prereqs => sub ($dist, $prereqs) { $prereqs },
  dist    => sub ($dist, $prereqs) { $dist->{dist} },
  cpanid  => sub ($dist, $prereqs) { $dist->{cpanid} },
  minperl => sub ($dist, $prereqs) { $ma->perl_for_dist($dist->{dist}) // '~' },
);

for my $dist (sort { $count{$b} <=> $count{$a} } keys %count) {
  my $row = $row_for{$dist};

  my $count = $count{$dist};

  last if $opt->min_score && length($count) - 1 < $opt->min_score;

  next if $opt->cpanid && $row->{cpanid} ne uc $opt->cpanid;

  $table->add(
    map {; $col{$_}->($row, $count{$dist}) } $opt->format->@*
  );
}

print $table;

sub downstream_count ($dist) {
  my @dists = _dists_requiring($dist);
  my $count = @dists;

  my %seen;
  DIST: for (@dists) {
    next DIST if $seen{$_}++;
    $count += _dists_requiring($_);
  }

  return $count;
}

sub _dists_requiring ($dist) {
  state %dists_requiring;

  $dists_requiring{$dist} //= do {
    my $dists = $dbh->selectcol_arrayref(
      $sth,
      { Slice => {} },
      $dist,
    );
  };

  return $dists_requiring{$dist}->@*;
}
